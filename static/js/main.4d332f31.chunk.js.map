{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/statePicker/StatePicker.jsx","App.js","serviceWorker.js","index.js"],"names":["gridStyles","display","marginTop","marginLeft","cardStyles","height","Cards","props","realData","data","confirmed","Grid","style","Card","CardContent","Typography","gutterBottom","variant","component","color","start","end","value","duration","recovered","deaths","fetchData","a","axios","get","lastUpdate","modifiedData","console","log","fetchChartData","modifiedChartData","map","dailyData","total","date","reportDate","Charts","useState","setdailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","lineChart2","className","Component","Header","Layout","Footer","Content","App","state","fetchData1","this","setState","class","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d332f31.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography, styled, StylesProvider, Grid } from '@material-ui/core';\r\nimport Countup from 'react-countup';\r\n\r\n\r\n\r\nconst gridStyles = {\r\n    display: 'flex',\r\n    marginTop: '2rem',\r\n    marginLeft: '16rem',\r\n\r\n}\r\nconst cardStyles = {\r\n    marginLeft: '3rem',\r\n\r\n    height: '25vh',\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Cards = (props) => {\r\n    const realData = props.data.data\r\n    if (!realData.confirmed) {\r\n        return 'Loading.....';\r\n    }\r\n    return (\r\n        <div >\r\n            <Grid style={gridStyles}>\r\n                <Card style={cardStyles}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                            Cases\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\" variant=\"h3\" color='Primary'>\r\n                            <Countup start={0} end={realData.confirmed.value} duration={10}>\r\n                            </Countup>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card style={cardStyles}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\" variant=\"h3\" color='textSecondary'>\r\n                            <Countup start={0} end={realData.recovered.value} duration={10}>\r\n                            </Countup>\r\n\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card style={cardStyles}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\" variant=\"h3\" color='error'>\r\n                            <Countup start={0} end={realData.deaths.value} duration={10}>\r\n                            </Countup>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nexport const fetchData = async () => {\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url);\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        }\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\nconst url_daily = 'https://covid19.mathdro.id/api/daily';\r\nexport const fetchChartData = async () => {\r\n    try {\r\n        const { data } = await axios.get(url_daily);\r\n        const modifiedChartData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n\r\n        }));\r\n\r\n        return modifiedChartData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchChartData } from '../../api/index';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Charts = (props) => {\r\n    const [dailyData, setdailyData] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        const fetchAPI = async () => {\r\n            setdailyData(await fetchChartData());\r\n        }\r\n        console.log(dailyData);\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n\r\n        dailyData.length ?\r\n            (<Line data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'infected',\r\n                    borderColor: '#00f',\r\n                    fill: false,\r\n                }],\r\n            }}>\r\n\r\n            </Line >) : null\r\n\r\n    );\r\n    const lineChart2 = (\r\n\r\n        dailyData.length ?\r\n            (<Line data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: '#f00',\r\n                    fill: false,\r\n                }],\r\n            }}>\r\n\r\n            </Line >) : null\r\n\r\n    );\r\n    return (\r\n        <div className=\"col-12\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    {lineChart}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {lineChart2}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport countryList from 'react-select-country-list';\r\nimport axios from 'axios';\r\n\r\nexport default class CountrySelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.options = countryList().getData()\r\n\r\n        this.state = {\r\n            options: this.options,\r\n            value: '',\r\n        }\r\n    }\r\n\r\n    changeHandler = value => {\r\n        let array = [];\r\n        Object.keys(this.state.value).map((key, index) => {\r\n            const myItem = this.state.value[key];\r\n            array.push(myItem);\r\n        })\r\n        this.setState({ value: array[0] });\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    fetchCountryData = async () => {\r\n\r\n        const url_daily1 = `https://covid19.mathdro.id/api/daily/${this.state.value}`;\r\n        try {\r\n            const data = await axios.get(url_daily1);\r\n            console.log(data);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            < div >\r\n                <Select\r\n                    ref={(input) => this.menu = input}\r\n                    options={this.state.options}\r\n                    value={this.state.value}\r\n                    onChange={this.changeHandler}\r\n\r\n                />\r\n\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport { Cards, CountrySelector, Charts } from './components';\nimport { fetchData } from './api/index';\n\nimport { Layout, Menu } from 'antd';\n\nconst { Header, Footer, Content } = Layout;\n\n\n\nclass App extends Component {\n\n  state = {\n    data: {},\n\n  }\n  async componentDidMount() {\n    const fetchData1 = await fetchData();\n\n    this.setState({ data: fetchData1 })\n\n\n  }\n\n  render() {\n    const data = this.state;\n\n    return (\n      <div className=\"container-fluid\">\n        <Layout>\n          <Header>\n            <nav class=\"navbar navbar-light bg-light\">\n              <span class=\"navbar-brand mb-0 h3\" style={{ marginLeft: '36vw' }}>Covid-19 Cases In The World </span>\n            </nav>\n          </Header>\n          <Content>\n            <Cards data={data}></Cards>\n            <Charts></Charts>\n          </Content>\n          <Footer style={{ marginTop: '5rem' }}>\n            <nav class=\"navbar fixed-bottom navbar-light bg-light\" >\n              <a class=\"navbar-brand\" href=\"#\">@Sandeshdeshmukh1</a>\n            </nav>\n          </Footer>\n        </Layout>\n\n\n\n      </div >\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}